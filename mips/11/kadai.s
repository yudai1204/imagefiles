.text
.globl main
main:
                                            # ## 挿入位置の指定（ノードのデータで指定）
    li      $s7,    3
                                            # ## 連結リストの生成

    li      $v0,    9                       # 1個目のノードの生成
    li      $a0,    8                       # 8バイト
    syscall 
    move    $s1,    $v0
    sw      $s1,    first($zero)            # 連結リストの頭のアドレスを格納
    li      $t0,    1
    sw      $t0,    0($s1)                  # データを1個目のノードのデータ部に格納

    li      $v0,    9                       # 2個目のノードの生成
    li      $a0,    8                       # 8バイト
    syscall                                 # 生成されたノードの先頭アドレス：$v0
    sw      $v0,    4($s1)                  # 1個目のノードのポインタ部に格納（リンク生成）
    move    $s1,    $v0                     # $s1の更新（2個めのノードの先頭番地）
    li      $t0,    3
    sw      $t0,    0($s1)                  # データを2個目のノードのデータ部に格納

    li      $v0,    9                       # 2個目のノードの生成
    li      $a0,    8                       # 8バイト
    syscall                                 # 生成されたノードの先頭アドレス：$v0
    sw      $v0,    4($s1)                  # 1個目のノードのポインタ部に格納（リンク生成）
    move    $s1,    $v0                     # $s1の更新（2個めのノードの先頭番地）
    li      $t0,    5
    sw      $t0,    0($s1)                  # データを2個目のノードのデータ部に格納

    li      $v0,    9                       # 2個目のノードの生成
    li      $a0,    8                       # 8バイト
    syscall                                 # 生成されたノードの先頭アドレス：$v0
    sw      $v0,    4($s1)                  # 1個目のノードのポインタ部に格納（リンク生成）
    move    $s1,    $v0                     # $s1の更新（2個めのノードの先頭番地）
    li      $t0,    7
    sw      $t0,    0($s1)                  # データを2個目のノードのデータ部に格納

    li      $v0,    9                       # 3個目のノードの生成
    li      $a0,    8                       # 8バイト
    syscall                                 # 生成されたノードの先頭アドレス：$v0
    sw      $v0,    4($s1)                  # 2個目のノードのポインタ部に格納（リンク生成）
    move    $s1,    $v0                     # $s1の更新（3個めのノードの先頭番地）
    li      $t0,    9
    sw      $t0,    0($s1)                  # データを3個目のノードのデータ部に格納
    sw      $zero,  4($s1)                  # 3個目のノードのポインタ部にNULLを格納





                                            # ## 新ノードの生成
    li      $v0,    9                       # 新ノードの生成
    li      $a0,    8                       # 8バイト
    syscall                                 # 生成されたノードの先頭アドレス：$v0
    move    $s2,    $v0                     # 生成されたノードの先頭アドレスを$s2にコピー
    li      $t2,    6
    sw      $s7,    0($s2)                  # データを新ノードのデータ部に格納
                                            # ## 連結リストをトラバースしながら挿入
    lw      $s0,    first                   # 連結リストの最初のノードの先頭番地を$s0に
LOOP1: beq $s0, $zero, ENDLP                # 次へのポインタがNULLになったら終了
    lw      $t0,    8($s0)                  # ノードのデータ部の値を読出す
    blt     $t0,    $s7,            NEXT    # 指定したデータ$s7と一致すれば直後に挿入
    lw      $t4,    4($s0)                  # データが一致したノードXのポインタ部を読出す
    sw      $t4,    4($s2)                  # それを新ノードのポインタ部に格納
    sw      $s2,    4($s0)                  # 新ノードの先頭アドレスをXのポインタ部に格納
    j       PRINT                           # 挿入処理終わり
NEXT: lw $s0, 4($s0)                        # 次のノードの番地を$s0に上書き（更新）
    j       LOOP1
                                            # ## 連結リストのトラバースと表示
PRINT: lw $s0, first                        # 連結リストの最初のノードの先頭番地を$s0に
LOOP2: beq $s0, $zero, ENDLP                # 次へのポインタがNULLになったら終了
    lw      $a0,    0($s0)                  # ノードのデータ部の値を読出す
    li      $v0,    1                       # 整数値をコンソールに表示するsyscall番号
    syscall 
    la      $a0,    kuuhaku                 # 空白文字（セパレータ）を表示
    li      $v0,    4
    syscall 
    lw      $s0,    4($s0)                  # 次のノードの番地を$s0に上書き（更新）
    j       LOOP2
                                            # 終了処理
ENDLP: li $v0,10
    syscall 
    jr      $ra
                                            # データ・セグメント
.data
first: .word 0
kuuhaku: .asciiz " "